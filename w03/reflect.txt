///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #3 (P2)
Full Name  : Sahil Hareshbhai Patel
Student ID#: 173793225
Email      : shpatel27@myseneca.ca
Section    : NJJ

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

answer 1.

in the part 2 of the waorkshop 3, I created total 13 variables in the start of the code.they were listed below from the code;


// defining all characters and variables
char coffeetypeno1, coffeetypeno2, coffeetypeno3;
int weightofbagno1, weightofbagno2, weightofbagno3;
char coffeecreamtypeno1, coffeecreamtypeno2, coffeecreamtypeno3;
char strengthofcoffee, userofcoffeecream;
int dailyservings;
double GRAM_IN_LBS = 0.00220462;

here 
 
placed them all on the beginning of the code. This made my code look very clear and all the items were used in a very smooth manner. To find variables, I did not encounter difficulties mainly because all the variables in the given combined expression were grouped together at the start. new preference of customer (in table 3) and many more such cases needed to establish the relation of availability with the desired preference of customer. The variables were a must to be declared because normally without them the code line would have been very lengthy and just to create one line of code, it would have needed many logical operators and that, of course would have been quite confusing. I made all the declarations at the starting of the program so I was confident about the program flow.





Answer 2.

   printf(" 1|       %d         |      %d      |   %d   |\n", ((coffeetypeno1 == 'L' || coffeetypeno1 == 'l') == (strengthofcoffee == 'L' || strengthofcoffee == 'l')), (weightofbagno1 == 250 && dailyservings >= 1 && dailyservings <= 4),
       ((coffeecreamtypeno1 == 'Y' || coffeecreamtypeno1 == 'y') == (userofcoffeecream == 'Y' || userofcoffeecream == 'y')));
   printf(" 2|       %d         |      %d      |   %d   |\n", ((coffeetypeno2 == 'R' || coffeetypeno2 == 'r') == (strengthofcoffee == 'R' || strengthofcoffee == 'r')), (weightofbagno2 == 500 && dailyservings >= 5 && dailyservings <= 9),
       ((coffeecreamtypeno2 == 'Y' || coffeecreamtypeno2 == 'y') == (userofcoffeecream == 'Y' || userofcoffeecream == 'y')));
   printf(" 3|       %d         |      %d      |   %d   |\n", ((coffeetypeno3 == 'M' || coffeetypeno3 == 'm') == (strengthofcoffee == 'M' || strengthofcoffee == 'm')), (weightofbagno3 == 1000 && dailyservings >= 10),
       ((coffeecreamtypeno3 == 'Y' || coffeecreamtypeno3 == 'y') == (userofcoffeecream == 'Y' || userofcoffeecream == 'y')));


==: Compared two relational expressions that may have had different results. Here, it validates whether the got coffee type matches the got coffee strength, and whether the got cream suggestion coincides with the userâ€™s taste.

&&: Rejects any keys that do not pass all of the provided relational expressions joined with logical AND if present. It verifies whether the bag weight of product 1 is equals to 250 grams as well as the daily servings are ranging 1-4



 printf(" 1|       %d         |      %d      |   %d   |\n", ((coffeetypeno1 == 'L' || coffeetypeno1 == 'l') == (strengthofcoffee == 'L' || strengthofcoffee == 'l')), (weightofbagno1 == 250 && dailyservings >= 1 && dailyservings <= 4),
     ((coffeecreamtypeno1 == 'Y' || coffeecreamtypeno1 == 'y') == (userofcoffeecream == 'Y' || userofcoffeecream == 'y')));
 printf(" 2|       %d         |      %d      |   %d   |\n", ((coffeetypeno2 == 'R' || coffeetypeno2 == 'r') == (strengthofcoffee == 'R' || strengthofcoffee == 'r')), (weightofbagno2 == 500 && dailyservings >= 5 && dailyservings <= 9),
     ((coffeecreamtypeno2 == 'Y' || coffeecreamtypeno2 == 'y') == (userofcoffeecream == 'Y' || userofcoffeecream == 'y')));
 printf(" 3|       %d         |      %d      |   %d   |\n", ((coffeetypeno3 == 'M' || coffeetypeno3 == 'm') == (strengthofcoffee == 'M' || strengthofcoffee == 'm')), (weightofbagno3 == 1000 && dailyservings >= 10),
     ((coffeecreamtypeno3 == 'Y' || coffeecreamtypeno3 == 'y') == (userofcoffeecream == 'Y' || userofcoffeecream == 'y')));




Answer 3.

 deMorgan's law is a handy rule for converting conditions in logical expressions.


((coffeetypeno1 == 'L' || coffeetypeno1 == 'l') == (strengthofcoffee == 'L' || strengthofcoffee == 'l')), (weightofbagno1 == 250 && dailyservings >= 1 && dailyservings <= 4),
        ((coffeecreamtypeno1 == 'Y' || coffeecreamtypeno1 == 'y') == (userofcoffeecream == 'Y' || userofcoffeecream == 'y')));
((coffeetypeno2 == 'R' || coffeetypeno2 == 'r') == (strengthofcoffee == 'R' || strengthofcoffee == 'r')), (weightofbagno2 == 500 && dailyservings >= 5 && dailyservings <= 9),
        ((coffeecreamtypeno2 == 'Y' || coffeecreamtypeno2 == 'y') == (userofcoffeecream == 'Y' || userofcoffeecream == 'y')));
((coffeetypeno3 == 'M' || coffeetypeno3 == 'm') == (strengthofcoffee == 'M' || strengthofcoffee == 'm')), (weightofbagno3 == 1000 && dailyservings >= 10),
        ((coffeecreamtypeno3 == 'Y' || coffeecreamtypeno3 == 'y') == (userofcoffeecream == 'Y' || userofcoffeecream == 'y')));


Essentially, I did not do much and what I did was to swap the && operators with the || operators while placing a ! before the entire operation. If so, then both of the codes will be producing the same results because all that is different is the manner in which they have been coded: after all, the codes mean the same thing.
